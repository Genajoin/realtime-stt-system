[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mic-stream-py"
version = "1.0.0"
description = "Real-time Speech-to-Text system with client-server WebSocket architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "STT System Team", email = "team@example.com"},
]
maintainers = [
    {name = "STT System Team", email = "team@example.com"},
]
keywords = ["speech-to-text", "stt", "websocket", "realtime", "whisper", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    # WebSocket клиент
    "websockets>=11.0",
    
    # Аудио обработка
    "pyaudio>=0.2.11",
    "soundfile>=0.13.0",
    "scipy>=1.10.0",
    "numpy>=1.24.0",
    
    # VAD (Voice Activity Detection)
    "webrtcvad-wheels>=2.0.14",
    
    # Утилиты
    "pyperclip>=1.8",
    "prompt_toolkit>=3.0.0",
    "colorama>=0.4.6",
    "tqdm>=4.65.0",
    
    # GUI зависимости (tkinter встроен в Python)
]

[project.optional-dependencies]
# Серверные зависимости (для разработки и тестирования локально)
server = [
    "RealtimeSTT>=1.0.0",
    "faster-whisper>=1.0.0",
    "librosa>=0.10.0",
]

# GPU поддержка (PyTorch с CUDA)
gpu = [
    "torch==2.5.1+cu121; sys_platform != 'darwin'",
    "torchaudio==2.5.1+cu121; sys_platform != 'darwin'",
]

# CPU версия (PyTorch без CUDA)
cpu = [
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
]

# Все зависимости для разработки
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
]

# macOS специфичные зависимости
mac = [
    "sounddevice>=0.4.0",  # Альтернатива PyAudio для macOS
]

# Linux специфичные зависимости
linux = [
    "pyaudio>=0.2.11",     # Основная аудио библиотека для Linux
]

# Полная установка с GPU
full = [
    "mic-stream-py[server,gpu,dev]",
]

# Полная установка с CPU
full-cpu = [
    "mic-stream-py[server,cpu,dev]",
]

[project.urls]
Homepage = "https://github.com/example/mic-stream-py"
Repository = "https://github.com/example/mic-stream-py.git"
Documentation = "https://github.com/example/mic-stream-py/blob/main/README.md"
"Bug Tracker" = "https://github.com/example/mic-stream-py/issues"

[project.scripts]
# CLI точки входа
mic-stream = "mic_stream_py.cli:main"
stt-client = "mic_stream_py.cli:main_client"

[tool.setuptools.packages.find]
where = ["."]
include = ["mic_stream_py*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
mic_stream_py = ["py.typed"]

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["mic_stream_py"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]