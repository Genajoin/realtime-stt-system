#!/usr/bin/env python3
"""
GUI —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–∏—Å—å
"""

import tkinter as tk
from tkinter import scrolledtext, messagebox
import asyncio
import websockets
import json
import threading
import pyperclip
import os
import struct
import time
import pyaudio
import numpy as np
from typing import Optional
import logging

def load_env_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = os.path.join(os.path.dirname(__file__), ".env")
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key.strip()] = value.strip()

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_env_file()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TranscriptionEditor:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        self.root.geometry("800x600")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.control_ws = None
        self.data_ws = None
        self.is_connected = False
        
        # –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.sample_rate = 16000
        self.channels = 1
        self.audio_format = pyaudio.paInt16
        self.chunk_size = 1024
        self.audio_stream = None
        self.pyaudio_instance = None
        self.is_recording = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è WebSocket
        self.loop = None
        self.thread = None
        self.audio_thread = None
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.root.after(1000, self.auto_connect)
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.server_host = os.getenv("SERVER_HOST", "localhost")
        self.control_port = int(os.getenv("CONTROL_PORT", "8011"))
        self.data_port = int(os.getenv("DATA_PORT", "8012"))
        
        logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GUI: {self.server_host}:{self.control_port}/{self.data_port}")
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(
            title_frame, 
            text="–†–µ–¥–∞–∫—Ç–æ—Ä —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏", 
            font=("Arial", 16, "bold")
        ).pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.status_label = tk.Label(
            title_frame, 
            text="–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...", 
            font=("Arial", 12),
            fg="orange"
        )
        self.status_label.pack(side=tk.RIGHT)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        info_frame = tk.Frame(main_frame)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        server_info = f"–°–µ—Ä–≤–µ—Ä: {self.server_host}:{self.control_port}/{self.data_port}"
        tk.Label(
            info_frame, 
            text=server_info, 
            font=("Arial", 10), 
            fg="gray"
        ).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.clear_btn = tk.Button(
            control_frame, 
            text="–û—á–∏—Å—Ç–∏—Ç—å", 
            command=self.clear_text,
            bg="#f44336",
            fg="white",
            font=("Arial", 12, "bold"),
            width=12,
            height=2
        )
        self.clear_btn.pack(side=tk.LEFT, padx=(0, 15))
        
        self.copy_btn = tk.Button(
            control_frame, 
            text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä", 
            command=self.copy_to_clipboard,
            bg="#4CAF50",
            fg="white",
            font=("Arial", 12, "bold"),
            width=20,
            height=2
        )
        self.copy_btn.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è realtime —Ç–µ–∫—Å—Ç–∞
        status_frame = tk.Frame(main_frame)
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Label(
            status_frame, 
            text="–°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", 
            font=("Arial", 11, "bold")
        ).pack(anchor=tk.W, pady=(0, 2))
        
        self.status_text = tk.Text(
            status_frame,
            wrap=tk.WORD,
            font=("Arial", 11),
            height=3,
            bg="#ffffcc",  # –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            fg="#555555",
            relief="solid",
            borderwidth=1,
            state=tk.DISABLED  # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        )
        self.status_text.pack(fill=tk.X, pady=(0, 5))
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_frame = tk.Frame(main_frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        tk.Label(
            text_frame, 
            text="–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π):", 
            font=("Arial", 12, "bold")
        ).pack(anchor=tk.W, pady=(0, 5))
        
        self.text_area = scrolledtext.ScrolledText(
            text_frame,
            wrap=tk.WORD,
            font=("Arial", 12),
            height=15,  # –£–º–µ–Ω—å—à–∏–ª–∏ –≤—ã—Å–æ—Ç—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–æ–π –ø–∞–Ω–µ–ª–∏
            bg="#f8f9fa",
            relief="solid",
            borderwidth=1,
            undo=True  # –í–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
        )
        self.text_area.pack(fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.text_area.bind('<Control-z>', lambda e: self.text_area.edit_undo())
        self.text_area.bind('<Control-y>', lambda e: self.text_area.edit_redo())
        self.text_area.bind('<Control-Z>', lambda e: self.text_area.edit_redo())  # Shift+Ctrl+Z
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        tip_frame = tk.Frame(main_frame)
        tip_frame.pack(fill=tk.X, pady=(10, 0))
        
        tip_text = ("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –Ω–∞—á–Ω–µ—Ç –∑–∞–ø–∏—Å—å.\n"
                   "–ñ–µ–ª—Ç–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n"
                   "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                   "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+Z - –æ—Ç–º–µ–Ω–∞, Ctrl+Y - –ø–æ–≤—Ç–æ—Ä")
        
        tk.Label(
            tip_frame, 
            text=tip_text,
            font=("Arial", 9),
            fg="gray",
            wraplength=750,
            justify=tk.LEFT
        ).pack(anchor=tk.W)
        
    def auto_connect(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        self.connect_to_server()
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket"""
        try:
            # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.thread = threading.Thread(target=self.start_async_loop, daemon=True)
            self.thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.status_label.config(text=f"–û—à–∏–±–∫–∞: {e}", fg="red")
    
    def start_async_loop(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self.websocket_handler())
    
    async def websocket_handler(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        control_uri = f"ws://{self.server_host}:{self.control_port}"
        data_uri = f"ws://{self.server_host}:{self.data_port}"
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {control_uri} –∏ {data_uri}")
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É WebSocket
            self.control_ws = await websockets.connect(control_uri)
            self.is_connected = True
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, lambda: self.status_label.config(
                text="–ì–æ—Ç–æ–≤ - –∑–∞–ø—É—Å—Ç–∏—Ç–µ rich –∫–ª–∏–µ–Ω—Ç", fg="green"
            ))
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—Ç–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
            self.data_ws = await websockets.connect(data_uri)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
            if self.setup_audio():
                self.start_audio_recording()
                logger.info("–ê—É–¥–∏–æ –∑–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å - –º–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É–¥–∏–æ")
            
            # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.gather(
                self.handle_control_messages(),
                self.handle_data_messages()
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
            self.root.after(0, lambda: self.status_label.config(
                text=f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", fg="red"
            ))
    
    async def handle_control_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if self.control_ws:
                async for message in self.control_ws:
                    data = json.loads(message)
                    logger.info(f"Control message: {data}")
        except websockets.exceptions.ConnectionClosed:
            logger.info("Control connection closed")
            self.root.after(0, lambda: self.status_label.config(
                text="–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", fg="red"
            ))
    
    async def handle_data_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
        try:
            if self.data_ws:
                async for message in self.data_ws:
                    try:
                        data = json.loads(message)
                        msg_type = data.get('type')
                        
                        if msg_type == 'realtime':
                            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                            text = data.get('text', '').strip()
                            if text:
                                self.root.after(0, lambda t=text: self.update_realtime_text(t))
                                
                        elif msg_type == 'fullSentence':
                            # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—Å—Ç—É
                            text = data.get('text', '').strip()
                            if text:
                                self.root.after(0, lambda t=text: self.append_sentence(t))
                                
                        elif msg_type == 'transcription' and 'text' in data:
                            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                            text = data['text'].strip()
                            if text:
                                self.root.after(0, lambda t=text: self.append_text(t))
                                
                    except json.JSONDecodeError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON: {message}")
        except websockets.exceptions.ConnectionClosed:
            logger.info("Data connection closed")
    
    def append_text(self, text: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        self.append_sentence(text)
    
    def update_realtime_text(self, text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ (realtime) —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        if text and text.strip():
            # –í–∫–ª—é—á–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º
            self.status_text.config(state=tk.NORMAL)
            self.status_text.delete("1.0", tk.END)
            self.status_text.insert("1.0", f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è: {text.strip()}")
            self.status_text.config(state=tk.DISABLED)
        else:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
            self.status_text.config(state=tk.NORMAL)
            self.status_text.delete("1.0", tk.END)
            self.status_text.insert("1.0", "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—á–∏...")
            self.status_text.config(state=tk.DISABLED)
    
    def append_sentence(self, text: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞"""
        if not text.strip():
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        try:
            cursor_pos = self.text_area.index(tk.INSERT)
        except tk.TclError:
            cursor_pos = "1.0"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        current_text = self.text_area.get("1.0", tk.END).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if current_text:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å –ø—Ä–æ–±–µ–ª–æ–º
            self.text_area.insert(tk.END, " " + text.strip())
        else:
            # –ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            self.text_area.insert(tk.END, text.strip())
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—Ç–∞—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        try:
            self.text_area.mark_set(tk.INSERT, cursor_pos)
        except tk.TclError:
            # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Å—Ç–∞–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
            self.text_area.mark_set(tk.INSERT, tk.END)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–æ –≤—Å—Ç–∞–≤–∫–∏
        self.text_area.see(tk.END)
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é –ø–∞–Ω–µ–ª—å
        self.update_realtime_text("")
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {text.strip()}")
    
    def copy_to_clipboard(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        text = self.text_area.get("1.0", tk.END).strip()
        if text:
            pyperclip.copy(text)
            # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            original_text = self.copy_btn.config('text')[-1]
            self.copy_btn.config(text="–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!", bg="#2E7D32")
            self.root.after(1500, lambda: self.copy_btn.config(
                text=original_text, bg="#4CAF50"
            ))
        else:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def clear_text(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è"""
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç?\n\n–≠—Ç–æ –Ω–∞—á–Ω–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
        )
        if result:
            self.text_area.delete("1.0", tk.END)
            logger.info("–¢–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä")
    
    def setup_audio(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É–¥–∏–æ –∑–∞—Ö–≤–∞—Ç–∞ —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            self.pyaudio_instance = pyaudio.PyAudio()
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            info = self.pyaudio_instance.get_host_api_info_by_index(0)
            num_devices = info.get('deviceCount', 0)
            
            input_device = None
            device_info = None
            for i in range(int(num_devices)):
                device_info = self.pyaudio_instance.get_device_info_by_host_api_device_index(0, i)
                max_input_channels = device_info.get('maxInputChannels', 0)
                if isinstance(max_input_channels, (int, float)) and max_input_channels > 0:
                    input_device = i
                    device_name = device_info.get('name', 'Unknown')
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_name}")
                    break
            
            if input_device is None:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä sample rate
            sample_rates = [16000, 44100, 48000, 22050, 8000]
            
            for rate in sample_rates:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É sample rate –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    if self.pyaudio_instance.is_format_supported(
                        rate=rate,
                        input_device=input_device,
                        input_channels=self.channels,
                        input_format=self.audio_format
                    ):
                        self.sample_rate = rate
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sample rate: {rate} Hz")
                        break
                except:
                    continue
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π rate, –∏—Å–ø–æ–ª—å–∑—É–µ–º default
                if device_info:
                    default_rate = device_info.get('defaultSampleRate', 16000)
                    self.sample_rate = int(default_rate)
                else:
                    self.sample_rate = 16000
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default sample rate: {self.sample_rate} Hz")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
            self.audio_stream = self.pyaudio_instance.open(
                format=self.audio_format,
                channels=self.channels,
                rate=self.sample_rate,
                input=True,
                input_device_index=input_device,
                frames_per_buffer=self.chunk_size
            )
            
            logger.info(f"–ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {self.sample_rate} Hz, {self.channels} –∫–∞–Ω–∞–ª–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ: {e}")
            return False
    
    def start_audio_recording(self):
        """–ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.audio_stream:
            return
        
        self.is_recording = True
        self.audio_thread = threading.Thread(target=self.audio_recording_loop, daemon=True)
        self.audio_thread.start()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.root.after(0, lambda: self.status_label.config(
            text="–ó–∞–ø–∏—Å—ã–≤–∞—é - –≥–æ–≤–æ—Ä–∏—Ç–µ", fg="green"
        ))
    
    def audio_recording_loop(self):
        """–¶–∏–∫–ª –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        retry_count = 0
        max_retries = 3
        
        while self.is_recording and self.audio_stream and self.data_ws and retry_count < max_retries:
            try:
                # –ß—Ç–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                audio_data = self.audio_stream.read(
                    self.chunk_size, 
                    exception_on_overflow=False
                )
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ asyncio
                if self.loop:
                    asyncio.run_coroutine_threadsafe(
                        self.send_audio_chunk(audio_data), 
                        self.loop
                    )
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
                retry_count = 0
                    
            except Exception as e:
                retry_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                
                if retry_count >= max_retries:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø–∏—Å–∏")
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ GUI
                    self.root.after(0, lambda: self.status_label.config(
                        text="–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ", fg="red"
                    ))
                    break
                else:
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    import time
                    time.sleep(0.1)
    
    async def send_audio_chunk(self, audio_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —á–∞–Ω–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.data_ws:
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata = {
            'sampleRate': self.sample_rate,
            'timestamp': time.time()
        }
        metadata_json = json.dumps(metadata).encode('utf-8')
        metadata_length = len(metadata_json)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –¥–ª–∏–Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö + –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ + –∞—É–¥–∏–æ
        message = struct.pack('<I', metadata_length) + metadata_json + audio_data
        
        try:
            await self.data_ws.send(message)
        except websockets.exceptions.ConnectionClosed:
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ")
    
    def close_audio(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞"""
        self.is_recording = False
        
        if self.audio_stream:
            self.audio_stream.stop_stream()
            self.audio_stream.close()
            
        if self.pyaudio_instance:
            self.pyaudio_instance.terminate()
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏
        self.close_audio()
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if self.is_connected:
            logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
            try:
                if self.control_ws and self.loop:
                    asyncio.run_coroutine_threadsafe(self.control_ws.close(), self.loop)
                if self.data_ws and self.loop:
                    asyncio.run_coroutine_threadsafe(self.data_ws.close(), self.loop)
            except:
                pass
        
        self.root.destroy()

def main():
    root = tk.Tk()
    app = TranscriptionEditor(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    root.mainloop()

if __name__ == "__main__":
    main()