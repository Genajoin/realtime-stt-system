#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ .env —Ñ–∞–π–ª–∞.
–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
"""

import os
import sys
from env_config import EnvConfig

# –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
env_vars_to_remove = [
    'WHISPER_MODEL', 'LANGUAGE', 'REALTIME_MODEL_TYPE', 'DEVICE',
    'ENABLE_REALTIME_TRANSCRIPTION', 'SILERO_USE_ONNX',
    'SILERO_SENSITIVITY', 'WEBRTC_SENSITIVITY', 
    'POST_SPEECH_SILENCE_DURATION', 'MIN_LENGTH_OF_RECORDING',
    'BEAM_SIZE', 'BEAM_SIZE_REALTIME', 'REALTIME_PROCESSING_PAUSE',
    'INITIAL_PROMPT', 'CONTROL_PORT', 'DATA_PORT'
]

for var in env_vars_to_remove:
    if var in os.environ:
        del os.environ[var]

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º

def test_defaults():
    """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    print("=== –¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–±–µ–∑ .env —Ñ–∞–π–ª–∞) ===\n")
    
    config = EnvConfig()
    
    expected_defaults = {
        'model': 'medium',
        'language': 'ru', 
        'realtime_model_type': 'tiny',
        'device': 'cuda',
        'enable_realtime_transcription': True,
        'silero_use_onnx': True,
        'silero_sensitivity': 0.05,
        'webrtc_sensitivity': 3,
        'post_speech_silence_duration': 0.7,
        'min_length_of_recording': 1.1,
        'beam_size': 5,
        'beam_size_realtime': 3,
        'realtime_processing_pause': 0.02,
        'control_port': 8011,
        'data_port': 8012
    }
    
    all_passed = True
    
    for key, expected_value in expected_defaults.items():
        actual_value = config.get(key)
        status = "‚úÖ" if actual_value == expected_value else "‚ùå"
        print(f"{status} {key}: {actual_value} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_value})")
        
        if actual_value != expected_value:
            all_passed = False
    
    print(f"\n–ü—Ä–æ–º–ø—Ç: {config.get('initial_prompt')[:50]}...")
    
    if all_passed:
        print("\n‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
        print("üì¶ –°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ .env —Ñ–∞–π–ª–∞")
        return True
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return False

if __name__ == '__main__':
    success = test_defaults()
    sys.exit(0 if success else 1)