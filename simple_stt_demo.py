#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç RealtimeSTT –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.
"""

import sys
import os
from colorama import init, Fore, Style
from RealtimeSTT import AudioToTextRecorder

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
init()

class SimpleSTTDemo:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
        print(f"{Fore.CYAN}=== –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ ==={Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...{Style.RESET_ALL}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.recorder = AudioToTextRecorder(
                model="small",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º small –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
                language="ru",  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)
                compute_type="default",
                device="cuda" if self.check_cuda() else "cpu",
                
                # –í–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                enable_realtime_transcription=True,
                realtime_processing_pause=0.1,  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100–º—Å
                realtime_model_type="tiny",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –≤—Å–µ–≥–æ (–ø—Ä–æ—â–µ –∏ –Ω–∞–¥–µ–∂–Ω–µ–µ)
                use_main_model_for_realtime=True,
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VAD (Voice Activity Detection)
                silero_sensitivity=0.4,
                webrtc_sensitivity=3,
                post_speech_silence_duration=0.4,
                min_length_of_recording=0.5,
                
                # –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                ensure_sentence_starting_uppercase=True,
                ensure_sentence_ends_with_period=True,
                
                # Callbacks
                on_realtime_transcription_update=self.on_realtime_update,
                on_realtime_transcription_stabilized=self.on_stabilized_update,
                on_recording_start=self.on_recording_start,
                on_recording_stop=self.on_recording_stop,
                on_vad_detect_start=self.on_vad_start,
                on_vad_detect_stop=self.on_vad_stop,
                
                # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
                spinner=False,
                debug_mode=False
            )
            

            
            print(f"{Fore.GREEN}‚úì –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Style.RESET_ALL}")
            print(f"{Fore.CYAN}–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {self.recorder.device.upper()}{Style.RESET_ALL}")
            
        except Exception as e:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}{Style.RESET_ALL}")
            sys.exit(1)
            
        self.current_line = ""
        self.full_text = []
        
    def check_cuda(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA."""
        try:
            import torch
            return torch.cuda.is_available()
        except:
            return False
    
    def on_realtime_update(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏."""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        sys.stdout.write('\r' + ' ' * len(self.current_line) + '\r')
        self.current_line = f"{Fore.YELLOW}‚ñ∂ {text}{Style.RESET_ALL}"
        sys.stdout.write(self.current_line)
        sys.stdout.flush()
    
    def on_stabilized_update(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ)."""
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        sys.stdout.write('\r' + ' ' * len(self.current_line) + '\r')
        self.current_line = f"{Fore.GREEN}‚ñ∫ {text}{Style.RESET_ALL}"
        sys.stdout.write(self.current_line)
        sys.stdout.flush()
    
    def on_recording_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏."""
        print(f"\n{Fore.GREEN}üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...{Style.RESET_ALL}")
    
    def on_recording_stop(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏."""
        print(f"\n{Fore.RED}üî¥ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Style.RESET_ALL}")
    
    def on_vad_start(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞."""
        sys.stdout.write(f"\r{Fore.CYAN}[–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å]{Style.RESET_ALL} ")
        sys.stdout.flush()
    
    def on_vad_stop(self):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ä–µ—á–∏."""
        pass
    
    def process_final_text(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã."""
        if text.strip():
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
            sys.stdout.write('\r' + ' ' * len(self.current_line) + '\r')
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            print(f"{Fore.WHITE}‚úì {text}{Style.RESET_ALL}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.full_text.append(text)
            self.current_line = ""
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∏:{Style.RESET_ALL}")
        print(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π")
        print(f"  ‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –ª–∞—Ç–∏–Ω–∏—Ü–µ–π")
        print(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å: small (–±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞)")
        print(f"{Fore.YELLOW}–ö–æ–º–∞–Ω–¥—ã:{Style.RESET_ALL}")
        print(f"  ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        print(f"  ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}\n")
        
        print(f"{Fore.GREEN}üéôÔ∏è  –°–ª—É—à–∞—é... (–≥–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω){Style.RESET_ALL}\n")
        
        try:
            while True:
                # –ñ–¥–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—á—å
                self.recorder.text(self.process_final_text)
                
        except KeyboardInterrupt:
            self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        print(f"\n\n{Fore.YELLOW}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...{Style.RESET_ALL}")
        
        if self.full_text:
            print(f"\n{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}–ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–µ—Å—Å–∏–∏:{Style.RESET_ALL}")
            for i, text in enumerate(self.full_text, 1):
                print(f"{i}. {text}")
            print(f"{Fore.CYAN}{'='*60}{Style.RESET_ALL}")
        
        try:
            self.recorder.shutdown()
        except:
            pass
            
        print(f"{Fore.GREEN}‚úì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ{Style.RESET_ALL}")
        sys.exit(0)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        app = SimpleSTTDemo()
        app.run()
    except Exception as e:
        print(f"{Fore.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
        sys.exit(1)


if __name__ == "__main__":
    main()