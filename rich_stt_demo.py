#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–µ–º–æ-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Rich –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è—é—â–∏–º–∏—Å—è –ø–∞–Ω–µ–ª—è–º–∏.
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ RealtimeSTT.
"""

import os
import sys
from RealtimeSTT import AudioToTextRecorder
from rich.console import Console
from rich.live import Live
from rich.text import Text
from rich.panel import Panel
from rich.layout import Layout
import pyperclip  # –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞

class RichSTTDemo:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Rich –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Rich –∫–æ–Ω—Å–æ–ª–∏
        self.console = Console()
        self.live = Live(console=self.console, refresh_per_second=10, screen=False)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.full_sentences = []
        self.displayed_text = ""
        self.prev_text = ""
        self.current_text = ""
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—É–∑ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
        self.end_of_sentence_detection_pause = 0.45
        self.unknown_sentence_detection_pause = 0.7
        self.mid_sentence_detection_pause = 2.0
        
        self.console.print("[bold blue]üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...[/bold blue]")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ—Ä–¥–µ—Ä —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        self.recorder_config = {
            'model': 'small',  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
            'language': 'ru',  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã)
            'realtime_model_type': 'tiny',  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è real-time
            'compute_type': 'default',
            'device': 'cuda' if self.check_cuda() else 'cpu',
            
            # Real-time –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'enable_realtime_transcription': True,
            'realtime_processing_pause': 0.02,  # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            'on_realtime_transcription_update': self.on_realtime_update,
            
            # VAD –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'silero_sensitivity': 0.05,
            'webrtc_sensitivity': 3,
            'post_speech_silence_duration': self.unknown_sentence_detection_pause,
            'min_length_of_recording': 1.1,
            'min_gap_between_recordings': 0,
            'silero_deactivity_detection': True,
            'silero_use_onnx': True,
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            'beam_size': 5,
            'beam_size_realtime': 3,
            'early_transcription_on_silence': 0,
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ)
            'initial_prompt_realtime': (
                "–ó–∞–≤–µ—Ä—à–∞–π –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º.\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "–ó–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ: –Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ Python.\n"
                "–ù–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ: –ö–æ–≥–¥–∞ —è –ø–∏—à—É –∫–æ–¥ –Ω–∞...\n"
                "–ó–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ: –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
                "–ù–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ: –ü–æ—Ç–æ–º—É —á—Ç–æ API...\n"
            ),
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –≤—ã–≤–æ–¥—ã
            'spinner': False,
            'no_log_file': True,
            'debug_mode': False
        }
        
        try:
            self.recorder = AudioToTextRecorder(**self.recorder_config)
            self.console.print(f"[bold green]‚úì –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({self.recorder_config['device'].upper()})[/bold green]")
        except Exception as e:
            self.console.print(f"[bold red]‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}[/bold red]")
            sys.exit(1)
    
    def check_cuda(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA."""
        try:
            import torch
            return torch.cuda.is_available()
        except:
            return False
    
    def preprocess_text(self, text):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)."""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        text = text.lstrip()
        
        # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
        if text.startswith("..."):
            text = text[3:]
        
        # –°–Ω–æ–≤–∞ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        text = text.lstrip()
        
        # –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        if text:
            text = text[0].upper() + text[1:]
        
        return text
    
    def on_realtime_update(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        global recorder
        text = self.preprocess_text(text)
        self.current_text = text
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—É–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        sentence_end_marks = ['.', '!', '?', '„ÄÇ']
        if text.endswith("..."):
            self.recorder.post_speech_silence_duration = self.mid_sentence_detection_pause
        elif text and text[-1] in sentence_end_marks and self.prev_text and self.prev_text[-1] in sentence_end_marks:
            self.recorder.post_speech_silence_duration = self.end_of_sentence_detection_pause
        else:
            self.recorder.post_speech_silence_duration = self.unknown_sentence_detection_pause
        
        self.prev_text = text
        self.update_display()
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Rich –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        # –°–æ–∑–¥–∞–µ–º Rich —Ç–µ–∫—Å—Ç —Å —á–µ—Ä–µ–¥—É—é—â–∏–º–∏—Å—è —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        rich_text = Text()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        for i, sentence in enumerate(self.full_sentences):
            if i % 2 == 0:
                rich_text += Text(sentence, style="green") + Text(" ")
            else:
                rich_text += Text(sentence, style="cyan") + Text(" ")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
        if self.current_text:
            rich_text += Text(self.current_text, style="bold yellow")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        new_displayed_text = rich_text.plain
        if new_displayed_text != self.displayed_text:
            self.displayed_text = new_displayed_text
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            status = self.get_status_text()
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
            main_panel = Panel(
                rich_text if rich_text.plain.strip() else Text("–°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...", style="dim"),
                title="[bold green]üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏[/bold green]",
                border_style="bold green",
                padding=(1, 2)
            )
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞
            status_panel = Panel(
                status,
                title="[bold blue]‚ÑπÔ∏è  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/bold blue]",
                border_style="blue",
                padding=(0, 1)
            )
            
            # –°–æ–∑–¥–∞–µ–º layout
            layout = Layout()
            layout.split_column(
                Layout(main_panel, size=None),
                Layout(status_panel, size=6)
            )
            
            self.live.update(layout)
    
    def get_status_text(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞."""
        status_lines = [
            f"üéØ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π EN —Ç–µ—Ä–º–∏–Ω–æ–≤)",
            f"üß† –ú–æ–¥–µ–ª—å: {self.recorder_config['model']} ({self.recorder_config['device'].upper()})",
            f"üìä –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–ø–∏—Å–∞–Ω–æ: {len(self.full_sentences)}",
            f"‚å®Ô∏è  Ctrl+C - –≤—ã—Ö–æ–¥ | –¢–µ–∫—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä"
        ]
        return Text("\n".join(status_lines), style="dim")
    
    def process_final_text(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—Ä–∞–∑—ã."""
        text = self.preprocess_text(text)
        text = text.rstrip()
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if text.endswith("..."):
            text = text[:-3].strip()
        
        if not text:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        self.full_sentences.append(text)
        self.prev_text = ""
        self.current_text = ""
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        try:
            pyperclip.copy(text)
            self.console.print(f"[dim]üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä: {text[:50]}{'...' if len(text) > 50 else ''}[/dim]")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—É–∑—É
        self.recorder.post_speech_silence_duration = self.unknown_sentence_detection_pause
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.update_display()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.live.start()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            initial_panel = Panel(
                Text("–°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...", style="cyan bold"),
                title="[bold yellow]üé§ –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞[/bold yellow]",
                border_style="bold yellow"
            )
            self.live.update(initial_panel)
            
            self.console.print("\n[bold green]üéôÔ∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω...[/bold green]")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            while True:
                self.recorder.text(self.process_final_text)
                
        except KeyboardInterrupt:
            self.shutdown()
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."""
        self.live.stop()
        
        if self.full_sentences:
            self.console.print("\n[bold cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold cyan]")
            self.console.print("[bold green]üìú –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–µ—Å—Å–∏–∏:[/bold green]")
            self.console.print("[bold cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold cyan]")
            
            full_text = ""
            for i, sentence in enumerate(self.full_sentences, 1):
                colored_text = f"[green]{sentence}[/green]" if i % 2 == 1 else f"[cyan]{sentence}[/cyan]"
                self.console.print(f"{i:2d}. {colored_text}")
                full_text += sentence + " "
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä
            try:
                pyperclip.copy(full_text.strip())
                self.console.print(f"\n[bold yellow]üìã –í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞![/bold yellow]")
            except:
                pass
            
            self.console.print("[bold cyan]‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê[/bold cyan]")
        
        try:
            self.recorder.shutdown()
        except:
            pass
        
        self.console.print("[bold green]‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/bold green]")
        sys.exit(0)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        app = RichSTTDemo()
        app.run()
    except Exception as e:
        console = Console()
        console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}[/bold red]")
        sys.exit(1)


if __name__ == "__main__":
    main()